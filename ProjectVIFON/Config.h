#pragma once

#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include "WorldObject.h"

// class responsible for configuration of the map 
class Config {
public:
    // constructors
    Config();
	Config(unsigned int width, unsigned int height, const std::string& backgroundTEX, const std::string& movableTEX,
        const int TEXscheme[], const std::vector <WorldObject> MovableScheme, sf::Vector2f playerCoords);
    unsigned int getWidth() const;
    unsigned int getHeight() const;
    std::string getBackgroundTEX() const;
    std::string getMovableTEX() const;
    const int* getTEXscheme() const;
    const std::vector <WorldObject> getMovableObjScheme() const;
    sf::Vector2f getPlayerCoord() const;
    void operator=(const Config& another);

private:
    // size of the map
    unsigned int width;
    unsigned int height;
    std::string backgroundTEX;
    std::string movableTEX;
    const int* TEXscheme;
    std::vector <WorldObject> movableObjectsScheme;
    sf::Vector2f playerCoord;
};

//dorm - scheme of the tiles' placement and movable objects 
static const int dormTEXscheme[] = {
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 17, 15,  4,  5, 22, 22,  4,  5, 15, 19, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 13, 13, 13, 14, 14, 13, 13, 13, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 13, 13, 13, 14, 14, 13, 13, 13, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 13, 13, 13, 14, 14, 13, 13, 13, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    17, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24, 13, 13, 13, 14, 14, 13, 13, 13, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 19,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 13, 13, 13, 16, 18, 13, 13, 13, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
     6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  6,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24, 10, 10, 10, 10, 10, 10, 10, 10, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
     6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  6,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24, 10, 10, 10, 10, 10, 10, 10, 10, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
     6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  6,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24, 10, 10, 10, 10, 10, 10, 10, 10, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
     6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10,  3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  6,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,
     7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14,
    21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24, 10, 10, 10, 10, 10, 10, 10, 10, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 24,
    14, 12, 12, 12, 12,  3, 12, 12, 12, 12, 12,  3, 10, 10, 10, 10, 10, 10, 10, 10,  3, 12, 12, 12, 12, 12,  3, 12, 12, 12, 12, 14,
     6, 12, 12, 12, 12,  2, 12, 12, 12, 12, 12,  2, 10, 10, 10, 10, 10, 10, 10, 10,  2, 12, 12, 12, 12, 12,  2, 12, 12, 12, 12,  6,
     7, 12, 12, 12, 12, 14, 12, 12, 12, 17, 15, 23, 15, 15, 15,  1,  0, 15, 15, 15, 23, 15, 19, 12, 12, 12, 14, 12, 12, 12, 12,  7,
    14, 12, 12, 12, 12, 14, 12, 12, 12, 14, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14, 12, 12, 12, 14, 12, 12, 12, 12, 14,
    16, 15, 15, 15, 15, 23, 15, 15, 15, 24, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 21, 15, 15, 15, 23, 15, 15, 15, 15, 18,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 16, 15, 15, 15,  4,  8,  8,  8,  8,  5, 15, 15, 15, 18, 10, 10, 10, 10, 10, 10, 10, 10, 10,
};

// array representing the movable objects
// 1 dim - objects ID
// 2 dim - data:
//  0 - name
//  1 - left coordinate
//  2 - top coordinate
static const std::vector <WorldObject> dormMovableObj = {
    WorldObject(Bed, sf::Vector2f(1 * defTileSize, 5 * defTileSize), 0),
    WorldObject(Bed, sf::Vector2f(1 * defTileSize, 11 * defTileSize), 0),
    WorldObject(Closet, sf::Vector2f(7 * defTileSize, 5 * defTileSize), 0),
    WorldObject(Closet, sf::Vector2f(7 * defTileSize, 11 * defTileSize), 2),
    WorldObject(Desk, sf::Vector2f(1 * defTileSize, 9 * defTileSize), 1),
    WorldObject(Desk, sf::Vector2f(1 * defTileSize, 7 * defTileSize), 1),

};
//{int(Bed), 1, 5}, {Bed, 1, 11}, {Desk, 1, 7}, {Desk, 1, 9}, {Closet, 7, 5}, {Closet, 7, 11}